// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dreddsecure/escrow/pending_escrows.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PendingEscrows struct {
	PendingEscrowIds []uint64 `protobuf:"varint,1,rep,packed,name=pendingEscrowIds,proto3" json:"pendingEscrowIds,omitempty"`
}

func (m *PendingEscrows) Reset()         { *m = PendingEscrows{} }
func (m *PendingEscrows) String() string { return proto.CompactTextString(m) }
func (*PendingEscrows) ProtoMessage()    {}
func (*PendingEscrows) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1e4a0108d7787c8, []int{0}
}
func (m *PendingEscrows) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingEscrows) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingEscrows.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingEscrows) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingEscrows.Merge(m, src)
}
func (m *PendingEscrows) XXX_Size() int {
	return m.Size()
}
func (m *PendingEscrows) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingEscrows.DiscardUnknown(m)
}

var xxx_messageInfo_PendingEscrows proto.InternalMessageInfo

func (m *PendingEscrows) GetPendingEscrowIds() []uint64 {
	if m != nil {
		return m.PendingEscrowIds
	}
	return nil
}

func init() {
	proto.RegisterType((*PendingEscrows)(nil), "dreddsecure.escrow.PendingEscrows")
}

func init() {
	proto.RegisterFile("dreddsecure/escrow/pending_escrows.proto", fileDescriptor_e1e4a0108d7787c8)
}

var fileDescriptor_e1e4a0108d7787c8 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0x29, 0x4a, 0x4d,
	0x49, 0x29, 0x4e, 0x4d, 0x2e, 0x2d, 0x4a, 0xd5, 0x4f, 0x2d, 0x4e, 0x2e, 0xca, 0x2f, 0xd7, 0x2f,
	0x48, 0xcd, 0x4b, 0xc9, 0xcc, 0x4b, 0x8f, 0x87, 0x70, 0x8b, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0x84, 0x90, 0x54, 0xea, 0x41, 0xa4, 0xa4, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xd2, 0xfa,
	0x20, 0x16, 0x44, 0xa5, 0x94, 0x5c, 0x72, 0x7e, 0x71, 0x6e, 0x7e, 0xb1, 0x7e, 0x52, 0x62, 0x71,
	0xaa, 0x7e, 0x99, 0x61, 0x52, 0x6a, 0x49, 0xa2, 0xa1, 0x7e, 0x72, 0x7e, 0x66, 0x1e, 0x44, 0x5e,
	0xc9, 0x89, 0x8b, 0x2f, 0x00, 0x62, 0x85, 0x2b, 0xc4, 0x06, 0x21, 0x03, 0x2e, 0x81, 0x02, 0x64,
	0x11, 0xcf, 0x94, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x16, 0x27, 0x96, 0x13, 0xf7, 0xe4, 0x19,
	0x82, 0x30, 0x64, 0x9d, 0x4c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a,
	0x1a, 0xec, 0x4e, 0x5d, 0xa8, 0x97, 0x2a, 0x60, 0x9e, 0x2a, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62,
	0x03, 0xbb, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x23, 0x0b, 0xa2, 0x15, 0xf7, 0x00, 0x00,
	0x00,
}

func (m *PendingEscrows) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingEscrows) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingEscrows) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingEscrowIds) > 0 {
		dAtA2 := make([]byte, len(m.PendingEscrowIds)*10)
		var j1 int
		for _, num := range m.PendingEscrowIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPendingEscrows(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPendingEscrows(dAtA []byte, offset int, v uint64) int {
	offset -= sovPendingEscrows(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PendingEscrows) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingEscrowIds) > 0 {
		l = 0
		for _, e := range m.PendingEscrowIds {
			l += sovPendingEscrows(uint64(e))
		}
		n += 1 + sovPendingEscrows(uint64(l)) + l
	}
	return n
}

func sovPendingEscrows(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPendingEscrows(x uint64) (n int) {
	return sovPendingEscrows(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PendingEscrows) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPendingEscrows
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingEscrows: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingEscrows: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPendingEscrows
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingEscrowIds = append(m.PendingEscrowIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPendingEscrows
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPendingEscrows
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPendingEscrows
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingEscrowIds) == 0 {
					m.PendingEscrowIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPendingEscrows
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingEscrowIds = append(m.PendingEscrowIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingEscrowIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPendingEscrows(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPendingEscrows
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPendingEscrows(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPendingEscrows
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPendingEscrows
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPendingEscrows
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPendingEscrows
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPendingEscrows
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPendingEscrows
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPendingEscrows        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPendingEscrows          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPendingEscrows = fmt.Errorf("proto: unexpected end of group")
)
