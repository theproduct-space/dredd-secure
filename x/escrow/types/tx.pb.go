// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dreddsecure/escrow/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateEscrow struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	InitiatorCoins   []types.Coin `protobuf:"bytes,2,rep,name=initiatorCoins,proto3" json:"initiatorCoins"`
	FulfillerCoins   []types.Coin `protobuf:"bytes,3,rep,name=fulfillerCoins,proto3" json:"fulfillerCoins"`
	Tips             []types.Coin `protobuf:"bytes,4,rep,name=tips,proto3" json:"tips"`
	StartDate        string       `protobuf:"bytes,5,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate          string       `protobuf:"bytes,6,opt,name=endDate,proto3" json:"endDate,omitempty"`
	OracleConditions string       `protobuf:"bytes,7,opt,name=oracleConditions,proto3" json:"oracleConditions,omitempty"`
}

func (m *MsgCreateEscrow) Reset()         { *m = MsgCreateEscrow{} }
func (m *MsgCreateEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEscrow) ProtoMessage()    {}
func (*MsgCreateEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{0}
}
func (m *MsgCreateEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEscrow.Merge(m, src)
}
func (m *MsgCreateEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEscrow proto.InternalMessageInfo

func (m *MsgCreateEscrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateEscrow) GetInitiatorCoins() []types.Coin {
	if m != nil {
		return m.InitiatorCoins
	}
	return nil
}

func (m *MsgCreateEscrow) GetFulfillerCoins() []types.Coin {
	if m != nil {
		return m.FulfillerCoins
	}
	return nil
}

func (m *MsgCreateEscrow) GetTips() []types.Coin {
	if m != nil {
		return m.Tips
	}
	return nil
}

func (m *MsgCreateEscrow) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *MsgCreateEscrow) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *MsgCreateEscrow) GetOracleConditions() string {
	if m != nil {
		return m.OracleConditions
	}
	return ""
}

type MsgCreateEscrowResponse struct {
}

func (m *MsgCreateEscrowResponse) Reset()         { *m = MsgCreateEscrowResponse{} }
func (m *MsgCreateEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEscrowResponse) ProtoMessage()    {}
func (*MsgCreateEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{1}
}
func (m *MsgCreateEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEscrowResponse.Merge(m, src)
}
func (m *MsgCreateEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEscrowResponse proto.InternalMessageInfo

type MsgCancelEscrow struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCancelEscrow) Reset()         { *m = MsgCancelEscrow{} }
func (m *MsgCancelEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgCancelEscrow) ProtoMessage()    {}
func (*MsgCancelEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{2}
}
func (m *MsgCancelEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelEscrow.Merge(m, src)
}
func (m *MsgCancelEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelEscrow proto.InternalMessageInfo

func (m *MsgCancelEscrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelEscrow) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCancelEscrowResponse struct {
}

func (m *MsgCancelEscrowResponse) Reset()         { *m = MsgCancelEscrowResponse{} }
func (m *MsgCancelEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelEscrowResponse) ProtoMessage()    {}
func (*MsgCancelEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{3}
}
func (m *MsgCancelEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelEscrowResponse.Merge(m, src)
}
func (m *MsgCancelEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelEscrowResponse proto.InternalMessageInfo

type MsgFulfillEscrow struct {
	Creator  string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id       uint64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	DenomMap map[string]string `protobuf:"bytes,3,rep,name=denomMap,proto3" json:"denomMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MsgFulfillEscrow) Reset()         { *m = MsgFulfillEscrow{} }
func (m *MsgFulfillEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillEscrow) ProtoMessage()    {}
func (*MsgFulfillEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{4}
}
func (m *MsgFulfillEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillEscrow.Merge(m, src)
}
func (m *MsgFulfillEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillEscrow proto.InternalMessageInfo

func (m *MsgFulfillEscrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFulfillEscrow) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgFulfillEscrow) GetDenomMap() map[string]string {
	if m != nil {
		return m.DenomMap
	}
	return nil
}

type MsgFulfillEscrowResponse struct {
}

func (m *MsgFulfillEscrowResponse) Reset()         { *m = MsgFulfillEscrowResponse{} }
func (m *MsgFulfillEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillEscrowResponse) ProtoMessage()    {}
func (*MsgFulfillEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{5}
}
func (m *MsgFulfillEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillEscrowResponse.Merge(m, src)
}
func (m *MsgFulfillEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillEscrowResponse proto.InternalMessageInfo

type MsgOptOutEscrow struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgOptOutEscrow) Reset()         { *m = MsgOptOutEscrow{} }
func (m *MsgOptOutEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgOptOutEscrow) ProtoMessage()    {}
func (*MsgOptOutEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{6}
}
func (m *MsgOptOutEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOptOutEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOptOutEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOptOutEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOptOutEscrow.Merge(m, src)
}
func (m *MsgOptOutEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgOptOutEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOptOutEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOptOutEscrow proto.InternalMessageInfo

func (m *MsgOptOutEscrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgOptOutEscrow) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgOptOutEscrowResponse struct {
}

func (m *MsgOptOutEscrowResponse) Reset()         { *m = MsgOptOutEscrowResponse{} }
func (m *MsgOptOutEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOptOutEscrowResponse) ProtoMessage()    {}
func (*MsgOptOutEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{7}
}
func (m *MsgOptOutEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOptOutEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOptOutEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOptOutEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOptOutEscrowResponse.Merge(m, src)
}
func (m *MsgOptOutEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOptOutEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOptOutEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOptOutEscrowResponse proto.InternalMessageInfo

type MsgSendOracleRequestPacketData struct {
	ClientID         string       `protobuf:"bytes,5,opt,name=clientID,proto3" json:"clientID,omitempty"`
	OracleScriptID   uint64       `protobuf:"varint,6,opt,name=oracleScriptID,proto3" json:"oracleScriptID,omitempty"`
	Calldata         []byte       `protobuf:"bytes,7,opt,name=calldata,proto3" json:"calldata,omitempty"`
	AskCount         uint64       `protobuf:"varint,8,opt,name=askCount,proto3" json:"askCount,omitempty"`
	MinCount         uint64       `protobuf:"varint,9,opt,name=minCount,proto3" json:"minCount,omitempty"`
	FeeLimit         []types.Coin `protobuf:"bytes,10,rep,name=feeLimit,proto3" json:"feeLimit"`
	PrepareGas       uint64       `protobuf:"varint,11,opt,name=prepareGas,proto3" json:"prepareGas,omitempty"`
	ExecuteGas       uint64       `protobuf:"varint,12,opt,name=executeGas,proto3" json:"executeGas,omitempty"`
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Port             string       `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	ChannelID        string       `protobuf:"bytes,3,opt,name=channelID,proto3" json:"channelID,omitempty"`
	TimeoutTimestamp uint64       `protobuf:"varint,4,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
}

func (m *MsgSendOracleRequestPacketData) Reset()         { *m = MsgSendOracleRequestPacketData{} }
func (m *MsgSendOracleRequestPacketData) String() string { return proto.CompactTextString(m) }
func (*MsgSendOracleRequestPacketData) ProtoMessage()    {}
func (*MsgSendOracleRequestPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{8}
}
func (m *MsgSendOracleRequestPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendOracleRequestPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendOracleRequestPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendOracleRequestPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendOracleRequestPacketData.Merge(m, src)
}
func (m *MsgSendOracleRequestPacketData) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendOracleRequestPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendOracleRequestPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendOracleRequestPacketData proto.InternalMessageInfo

func (m *MsgSendOracleRequestPacketData) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *MsgSendOracleRequestPacketData) GetOracleScriptID() uint64 {
	if m != nil {
		return m.OracleScriptID
	}
	return 0
}

func (m *MsgSendOracleRequestPacketData) GetCalldata() []byte {
	if m != nil {
		return m.Calldata
	}
	return nil
}

func (m *MsgSendOracleRequestPacketData) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *MsgSendOracleRequestPacketData) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *MsgSendOracleRequestPacketData) GetFeeLimit() []types.Coin {
	if m != nil {
		return m.FeeLimit
	}
	return nil
}

func (m *MsgSendOracleRequestPacketData) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *MsgSendOracleRequestPacketData) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

func (m *MsgSendOracleRequestPacketData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendOracleRequestPacketData) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *MsgSendOracleRequestPacketData) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *MsgSendOracleRequestPacketData) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

type MsgSendOracleRequestPacketDataResponse struct {
}

func (m *MsgSendOracleRequestPacketDataResponse) Reset() {
	*m = MsgSendOracleRequestPacketDataResponse{}
}
func (m *MsgSendOracleRequestPacketDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendOracleRequestPacketDataResponse) ProtoMessage()    {}
func (*MsgSendOracleRequestPacketDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{9}
}
func (m *MsgSendOracleRequestPacketDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendOracleRequestPacketDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendOracleRequestPacketDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendOracleRequestPacketDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendOracleRequestPacketDataResponse.Merge(m, src)
}
func (m *MsgSendOracleRequestPacketDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendOracleRequestPacketDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendOracleRequestPacketDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendOracleRequestPacketDataResponse proto.InternalMessageInfo

type MsgSetSourceChannel struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *MsgSetSourceChannel) Reset()         { *m = MsgSetSourceChannel{} }
func (m *MsgSetSourceChannel) String() string { return proto.CompactTextString(m) }
func (*MsgSetSourceChannel) ProtoMessage()    {}
func (*MsgSetSourceChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{10}
}
func (m *MsgSetSourceChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetSourceChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetSourceChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetSourceChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetSourceChannel.Merge(m, src)
}
func (m *MsgSetSourceChannel) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetSourceChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetSourceChannel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetSourceChannel proto.InternalMessageInfo

func (m *MsgSetSourceChannel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetSourceChannel) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type MsgSetSourceChannelResponse struct {
}

func (m *MsgSetSourceChannelResponse) Reset()         { *m = MsgSetSourceChannelResponse{} }
func (m *MsgSetSourceChannelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetSourceChannelResponse) ProtoMessage()    {}
func (*MsgSetSourceChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92b765ed5c8100e9, []int{11}
}
func (m *MsgSetSourceChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetSourceChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetSourceChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetSourceChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetSourceChannelResponse.Merge(m, src)
}
func (m *MsgSetSourceChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetSourceChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetSourceChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetSourceChannelResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateEscrow)(nil), "dreddsecure.escrow.MsgCreateEscrow")
	proto.RegisterType((*MsgCreateEscrowResponse)(nil), "dreddsecure.escrow.MsgCreateEscrowResponse")
	proto.RegisterType((*MsgCancelEscrow)(nil), "dreddsecure.escrow.MsgCancelEscrow")
	proto.RegisterType((*MsgCancelEscrowResponse)(nil), "dreddsecure.escrow.MsgCancelEscrowResponse")
	proto.RegisterType((*MsgFulfillEscrow)(nil), "dreddsecure.escrow.MsgFulfillEscrow")
	proto.RegisterMapType((map[string]string)(nil), "dreddsecure.escrow.MsgFulfillEscrow.DenomMapEntry")
	proto.RegisterType((*MsgFulfillEscrowResponse)(nil), "dreddsecure.escrow.MsgFulfillEscrowResponse")
	proto.RegisterType((*MsgOptOutEscrow)(nil), "dreddsecure.escrow.MsgOptOutEscrow")
	proto.RegisterType((*MsgOptOutEscrowResponse)(nil), "dreddsecure.escrow.MsgOptOutEscrowResponse")
	proto.RegisterType((*MsgSendOracleRequestPacketData)(nil), "dreddsecure.escrow.MsgSendOracleRequestPacketData")
	proto.RegisterType((*MsgSendOracleRequestPacketDataResponse)(nil), "dreddsecure.escrow.MsgSendOracleRequestPacketDataResponse")
	proto.RegisterType((*MsgSetSourceChannel)(nil), "dreddsecure.escrow.MsgSetSourceChannel")
	proto.RegisterType((*MsgSetSourceChannelResponse)(nil), "dreddsecure.escrow.MsgSetSourceChannelResponse")
}

func init() { proto.RegisterFile("dreddsecure/escrow/tx.proto", fileDescriptor_92b765ed5c8100e9) }

var fileDescriptor_92b765ed5c8100e9 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x4e, 0xe3, 0x46,
	0x14, 0x8e, 0x93, 0x00, 0xc9, 0xf0, 0xd3, 0x68, 0x8a, 0x54, 0x63, 0x5a, 0x17, 0xa5, 0x15, 0x8d,
	0xfa, 0xe3, 0x08, 0x50, 0xa5, 0x0a, 0xee, 0x48, 0x28, 0x42, 0x6a, 0x4a, 0x65, 0x7a, 0xd5, 0xab,
	0x0e, 0xf6, 0x21, 0x1d, 0xe1, 0xcc, 0xb8, 0x9e, 0x31, 0x85, 0x87, 0xe8, 0x6a, 0x5f, 0x64, 0xdf,
	0x83, 0xbd, 0xe3, 0x6a, 0xb5, 0x57, 0xab, 0x15, 0xbc, 0xc8, 0x6a, 0x66, 0x1c, 0xe3, 0x24, 0x24,
	0x1b, 0xf6, 0xce, 0xe7, 0x7c, 0xdf, 0xf9, 0xbe, 0x99, 0x33, 0x73, 0x46, 0x46, 0x9b, 0x61, 0x02,
	0x61, 0x28, 0x20, 0x48, 0x13, 0x68, 0x83, 0x08, 0x12, 0xfe, 0x5f, 0x5b, 0x5e, 0x7b, 0x71, 0xc2,
	0x25, 0xc7, 0xb8, 0x00, 0x7a, 0x06, 0x74, 0xd6, 0xfb, 0xbc, 0xcf, 0x35, 0xdc, 0x56, 0x5f, 0x86,
	0xe9, 0xb8, 0x01, 0x17, 0x03, 0x2e, 0xda, 0xe7, 0x44, 0x40, 0xfb, 0x6a, 0xe7, 0x1c, 0x24, 0xd9,
	0x69, 0x07, 0x9c, 0x32, 0x83, 0x37, 0xdf, 0x94, 0xd1, 0x67, 0x3d, 0xd1, 0xef, 0x24, 0x40, 0x24,
	0x1c, 0x69, 0x25, 0x6c, 0xa3, 0xa5, 0x40, 0xc5, 0x3c, 0xb1, 0xad, 0x2d, 0xab, 0x55, 0xf7, 0x87,
	0x21, 0x3e, 0x46, 0x6b, 0x94, 0x51, 0x49, 0x55, 0xd0, 0xe1, 0x94, 0x09, 0xbb, 0xbc, 0x55, 0x69,
	0x2d, 0xef, 0x6e, 0x78, 0xc6, 0xc6, 0x53, 0x36, 0x5e, 0x66, 0xe3, 0x29, 0xc6, 0x61, 0xf5, 0xf6,
	0xdd, 0xd7, 0x25, 0x7f, 0xac, 0x4c, 0x09, 0x5d, 0xa4, 0xd1, 0x05, 0x8d, 0x22, 0xc8, 0x84, 0x2a,
	0x73, 0x0a, 0x8d, 0x96, 0xe1, 0x3d, 0x54, 0x95, 0x34, 0x16, 0x76, 0x75, 0xbe, 0x72, 0x4d, 0xc6,
	0x5f, 0xa2, 0xba, 0x90, 0x24, 0x91, 0x5d, 0x22, 0xc1, 0x5e, 0xd0, 0x5b, 0x7c, 0x4c, 0xa8, 0xed,
	0x03, 0x0b, 0x35, 0xb6, 0x68, 0xb6, 0x9f, 0x85, 0xf8, 0x7b, 0xd4, 0xe0, 0x09, 0x09, 0x22, 0xe8,
	0x70, 0x16, 0x52, 0x49, 0x39, 0x13, 0xf6, 0x92, 0xa6, 0x4c, 0xe4, 0x9b, 0x1b, 0xe8, 0x8b, 0xb1,
	0xbe, 0xfa, 0x20, 0x62, 0xce, 0x04, 0x34, 0x0f, 0x4c, 0xcb, 0x09, 0x0b, 0x20, 0xfa, 0x68, 0xcb,
	0xd7, 0x50, 0x99, 0x86, 0x76, 0x79, 0xcb, 0x6a, 0x55, 0xfd, 0x32, 0x0d, 0x87, 0xba, 0x85, 0xe2,
	0x5c, 0xf7, 0xb5, 0x85, 0x1a, 0x3d, 0xd1, 0xff, 0xd5, 0x74, 0xe8, 0xb9, 0xca, 0xf8, 0x77, 0x54,
	0x0b, 0x81, 0xf1, 0x41, 0x8f, 0xc4, 0xd9, 0x69, 0xec, 0x7a, 0x93, 0xf7, 0xcc, 0x1b, 0x77, 0xf0,
	0xba, 0x59, 0xd1, 0x11, 0x93, 0xc9, 0x8d, 0x9f, 0x6b, 0x38, 0x07, 0x68, 0x75, 0x04, 0xc2, 0x0d,
	0x54, 0xb9, 0x84, 0x9b, 0x6c, 0x19, 0xea, 0x13, 0xaf, 0xa3, 0x85, 0x2b, 0x12, 0xa5, 0xa0, 0x57,
	0x51, 0xf7, 0x4d, 0xb0, 0x5f, 0xfe, 0xc5, 0x6a, 0x3a, 0xc8, 0x1e, 0x37, 0x1a, 0xeb, 0xdf, 0x69,
	0x2c, 0x4f, 0x53, 0xf9, 0x89, 0xfd, 0x2b, 0x16, 0xe7, 0xba, 0xaf, 0x2a, 0xc8, 0xed, 0x89, 0xfe,
	0x19, 0xb0, 0xf0, 0x54, 0x1f, 0xa7, 0x0f, 0xff, 0xa6, 0x20, 0xe4, 0x1f, 0x24, 0xb8, 0x04, 0x75,
	0x37, 0x08, 0x76, 0x50, 0x2d, 0x88, 0x28, 0x30, 0x79, 0xd2, 0xcd, 0x2e, 0x4e, 0x1e, 0xe3, 0x6d,
	0xb4, 0x66, 0x6e, 0xc1, 0x59, 0x90, 0xd0, 0x58, 0x31, 0x16, 0xb5, 0xeb, 0x58, 0x56, 0x6b, 0x90,
	0x28, 0x0a, 0x89, 0x24, 0xfa, 0xf6, 0xac, 0xf8, 0x79, 0xac, 0x30, 0x22, 0x2e, 0x3b, 0x3c, 0x65,
	0xd2, 0xae, 0xe9, 0xea, 0x3c, 0x56, 0xd8, 0x80, 0x32, 0x83, 0xd5, 0x0d, 0x36, 0x8c, 0xf1, 0x01,
	0xaa, 0x5d, 0x00, 0xfc, 0x46, 0x07, 0x54, 0xda, 0x68, 0xbe, 0x51, 0xc8, 0x0b, 0xb0, 0x8b, 0x50,
	0x9c, 0x40, 0x4c, 0x12, 0x38, 0x26, 0xc2, 0x5e, 0xd6, 0xd2, 0x85, 0x8c, 0xc2, 0xe1, 0x1a, 0x82,
	0x54, 0x6a, 0x7c, 0xc5, 0xe0, 0x8f, 0x99, 0x19, 0xcd, 0xc7, 0xa8, 0x1a, 0xf3, 0x44, 0x66, 0xc7,
	0xab, 0xbf, 0xd5, 0xf0, 0x05, 0xff, 0x10, 0xc6, 0x20, 0x3a, 0xe9, 0xda, 0x15, 0x33, 0x7c, 0x79,
	0x42, 0x8d, 0x98, 0xa4, 0x03, 0xe0, 0xa9, 0xfc, 0x93, 0x0e, 0x40, 0x48, 0x32, 0x88, 0xed, 0xaa,
	0x76, 0x9c, 0xc8, 0x37, 0x5b, 0x68, 0x7b, 0xf6, 0x71, 0xe5, 0x27, 0x7b, 0x82, 0x3e, 0xd7, 0x4c,
	0x79, 0xc6, 0xd3, 0x24, 0x80, 0x8e, 0xb1, 0x9b, 0xb1, 0x70, 0x85, 0x18, 0x52, 0xb6, 0xf6, 0x61,
	0xd8, 0xfc, 0x0a, 0x6d, 0x3e, 0x21, 0x35, 0x74, 0xda, 0x7d, 0xb1, 0x80, 0x2a, 0x3d, 0xd1, 0xc7,
	0x7f, 0xa3, 0x95, 0x91, 0x37, 0xf5, 0x9b, 0x29, 0xa3, 0x54, 0x24, 0x39, 0x3f, 0xcc, 0x41, 0x1a,
	0x3a, 0x69, 0x87, 0xe2, 0x13, 0x32, 0xd5, 0xa1, 0x40, 0x9a, 0xee, 0xf0, 0xc4, 0x7b, 0x82, 0x03,
	0xb4, 0x3a, 0xfa, 0x96, 0x7c, 0x3b, 0xcf, 0x7b, 0xe0, 0xfc, 0x38, 0x0f, 0xab, 0xb8, 0x8d, 0x91,
	0x49, 0x9e, 0xb6, 0x8d, 0x22, 0x69, 0xea, 0x36, 0x9e, 0x1a, 0x6b, 0xfc, 0xbf, 0x85, 0x36, 0x67,
	0xcd, 0xf4, 0xb4, 0x57, 0x6e, 0x46, 0x8d, 0xb3, 0xff, 0xfc, 0x9a, 0x7c, 0x3d, 0x11, 0x6a, 0x4c,
	0xdc, 0xc4, 0xef, 0xa6, 0xea, 0x8d, 0x12, 0x9d, 0xf6, 0x9c, 0xc4, 0xa1, 0xdb, 0xe1, 0xcf, 0xb7,
	0xf7, 0xae, 0x75, 0x77, 0xef, 0x5a, 0xef, 0xef, 0x5d, 0xeb, 0xe5, 0x83, 0x5b, 0xba, 0x7b, 0x70,
	0x4b, 0x6f, 0x1f, 0xdc, 0xd2, 0x5f, 0xe6, 0x0f, 0xe3, 0xa7, 0xec, 0x17, 0xe3, 0x3a, 0xff, 0xc9,
	0xb8, 0x89, 0x41, 0x9c, 0x2f, 0xea, 0xdf, 0x83, 0xbd, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4a,
	0x80, 0x5c, 0x50, 0x87, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateEscrow(ctx context.Context, in *MsgCreateEscrow, opts ...grpc.CallOption) (*MsgCreateEscrowResponse, error)
	CancelEscrow(ctx context.Context, in *MsgCancelEscrow, opts ...grpc.CallOption) (*MsgCancelEscrowResponse, error)
	FulfillEscrow(ctx context.Context, in *MsgFulfillEscrow, opts ...grpc.CallOption) (*MsgFulfillEscrowResponse, error)
	OptOutEscrow(ctx context.Context, in *MsgOptOutEscrow, opts ...grpc.CallOption) (*MsgOptOutEscrowResponse, error)
	SendOracleRequestPacketData(ctx context.Context, in *MsgSendOracleRequestPacketData, opts ...grpc.CallOption) (*MsgSendOracleRequestPacketDataResponse, error)
	SetSourceChannel(ctx context.Context, in *MsgSetSourceChannel, opts ...grpc.CallOption) (*MsgSetSourceChannelResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateEscrow(ctx context.Context, in *MsgCreateEscrow, opts ...grpc.CallOption) (*MsgCreateEscrowResponse, error) {
	out := new(MsgCreateEscrowResponse)
	err := c.cc.Invoke(ctx, "/dreddsecure.escrow.Msg/CreateEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelEscrow(ctx context.Context, in *MsgCancelEscrow, opts ...grpc.CallOption) (*MsgCancelEscrowResponse, error) {
	out := new(MsgCancelEscrowResponse)
	err := c.cc.Invoke(ctx, "/dreddsecure.escrow.Msg/CancelEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FulfillEscrow(ctx context.Context, in *MsgFulfillEscrow, opts ...grpc.CallOption) (*MsgFulfillEscrowResponse, error) {
	out := new(MsgFulfillEscrowResponse)
	err := c.cc.Invoke(ctx, "/dreddsecure.escrow.Msg/FulfillEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OptOutEscrow(ctx context.Context, in *MsgOptOutEscrow, opts ...grpc.CallOption) (*MsgOptOutEscrowResponse, error) {
	out := new(MsgOptOutEscrowResponse)
	err := c.cc.Invoke(ctx, "/dreddsecure.escrow.Msg/OptOutEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendOracleRequestPacketData(ctx context.Context, in *MsgSendOracleRequestPacketData, opts ...grpc.CallOption) (*MsgSendOracleRequestPacketDataResponse, error) {
	out := new(MsgSendOracleRequestPacketDataResponse)
	err := c.cc.Invoke(ctx, "/dreddsecure.escrow.Msg/SendOracleRequestPacketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetSourceChannel(ctx context.Context, in *MsgSetSourceChannel, opts ...grpc.CallOption) (*MsgSetSourceChannelResponse, error) {
	out := new(MsgSetSourceChannelResponse)
	err := c.cc.Invoke(ctx, "/dreddsecure.escrow.Msg/SetSourceChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateEscrow(context.Context, *MsgCreateEscrow) (*MsgCreateEscrowResponse, error)
	CancelEscrow(context.Context, *MsgCancelEscrow) (*MsgCancelEscrowResponse, error)
	FulfillEscrow(context.Context, *MsgFulfillEscrow) (*MsgFulfillEscrowResponse, error)
	OptOutEscrow(context.Context, *MsgOptOutEscrow) (*MsgOptOutEscrowResponse, error)
	SendOracleRequestPacketData(context.Context, *MsgSendOracleRequestPacketData) (*MsgSendOracleRequestPacketDataResponse, error)
	SetSourceChannel(context.Context, *MsgSetSourceChannel) (*MsgSetSourceChannelResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateEscrow(ctx context.Context, req *MsgCreateEscrow) (*MsgCreateEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEscrow not implemented")
}
func (*UnimplementedMsgServer) CancelEscrow(ctx context.Context, req *MsgCancelEscrow) (*MsgCancelEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelEscrow not implemented")
}
func (*UnimplementedMsgServer) FulfillEscrow(ctx context.Context, req *MsgFulfillEscrow) (*MsgFulfillEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfillEscrow not implemented")
}
func (*UnimplementedMsgServer) OptOutEscrow(ctx context.Context, req *MsgOptOutEscrow) (*MsgOptOutEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptOutEscrow not implemented")
}
func (*UnimplementedMsgServer) SendOracleRequestPacketData(ctx context.Context, req *MsgSendOracleRequestPacketData) (*MsgSendOracleRequestPacketDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOracleRequestPacketData not implemented")
}
func (*UnimplementedMsgServer) SetSourceChannel(ctx context.Context, req *MsgSetSourceChannel) (*MsgSetSourceChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSourceChannel not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreddsecure.escrow.Msg/CreateEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateEscrow(ctx, req.(*MsgCreateEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreddsecure.escrow.Msg/CancelEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelEscrow(ctx, req.(*MsgCancelEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FulfillEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFulfillEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FulfillEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreddsecure.escrow.Msg/FulfillEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FulfillEscrow(ctx, req.(*MsgFulfillEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OptOutEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOptOutEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OptOutEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreddsecure.escrow.Msg/OptOutEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OptOutEscrow(ctx, req.(*MsgOptOutEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendOracleRequestPacketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendOracleRequestPacketData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendOracleRequestPacketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreddsecure.escrow.Msg/SendOracleRequestPacketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendOracleRequestPacketData(ctx, req.(*MsgSendOracleRequestPacketData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetSourceChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetSourceChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetSourceChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreddsecure.escrow.Msg/SetSourceChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetSourceChannel(ctx, req.(*MsgSetSourceChannel))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dreddsecure.escrow.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEscrow",
			Handler:    _Msg_CreateEscrow_Handler,
		},
		{
			MethodName: "CancelEscrow",
			Handler:    _Msg_CancelEscrow_Handler,
		},
		{
			MethodName: "FulfillEscrow",
			Handler:    _Msg_FulfillEscrow_Handler,
		},
		{
			MethodName: "OptOutEscrow",
			Handler:    _Msg_OptOutEscrow_Handler,
		},
		{
			MethodName: "SendOracleRequestPacketData",
			Handler:    _Msg_SendOracleRequestPacketData_Handler,
		},
		{
			MethodName: "SetSourceChannel",
			Handler:    _Msg_SetSourceChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dreddsecure/escrow/tx.proto",
}

func (m *MsgCreateEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleConditions) > 0 {
		i -= len(m.OracleConditions)
		copy(dAtA[i:], m.OracleConditions)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleConditions)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EndDate) > 0 {
		i -= len(m.EndDate)
		copy(dAtA[i:], m.EndDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EndDate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartDate) > 0 {
		i -= len(m.StartDate)
		copy(dAtA[i:], m.StartDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StartDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tips) > 0 {
		for iNdEx := len(m.Tips) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tips[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.FulfillerCoins) > 0 {
		for iNdEx := len(m.FulfillerCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FulfillerCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InitiatorCoins) > 0 {
		for iNdEx := len(m.InitiatorCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitiatorCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFulfillEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomMap) > 0 {
		for k := range m.DenomMap {
			v := m.DenomMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTx(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFulfillEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOptOutEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOptOutEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOptOutEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOptOutEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOptOutEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOptOutEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendOracleRequestPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendOracleRequestPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendOracleRequestPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecuteGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x60
	}
	if m.PrepareGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x58
	}
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.MinCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x48
	}
	if m.AskCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Calldata) > 0 {
		i -= len(m.Calldata)
		copy(dAtA[i:], m.Calldata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Calldata)))
		i--
		dAtA[i] = 0x3a
	}
	if m.OracleScriptID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OracleScriptID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendOracleRequestPacketDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendOracleRequestPacketDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendOracleRequestPacketDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetSourceChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetSourceChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetSourceChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetSourceChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetSourceChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetSourceChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.InitiatorCoins) > 0 {
		for _, e := range m.InitiatorCoins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.FulfillerCoins) > 0 {
		for _, e := range m.FulfillerCoins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Tips) > 0 {
		for _, e := range m.Tips {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.StartDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EndDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OracleConditions)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCancelEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFulfillEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if len(m.DenomMap) > 0 {
		for k, v := range m.DenomMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + 1 + len(v) + sovTx(uint64(len(v)))
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MsgFulfillEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOptOutEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgOptOutEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendOracleRequestPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OracleScriptID != 0 {
		n += 1 + sovTx(uint64(m.OracleScriptID))
	}
	l = len(m.Calldata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AskCount != 0 {
		n += 1 + sovTx(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovTx(uint64(m.MinCount))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.PrepareGas != 0 {
		n += 1 + sovTx(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovTx(uint64(m.ExecuteGas))
	}
	return n
}

func (m *MsgSendOracleRequestPacketDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetSourceChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetSourceChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorCoins = append(m.InitiatorCoins, types.Coin{})
			if err := m.InitiatorCoins[len(m.InitiatorCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfillerCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FulfillerCoins = append(m.FulfillerCoins, types.Coin{})
			if err := m.FulfillerCoins[len(m.FulfillerCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tips = append(m.Tips, types.Coin{})
			if err := m.Tips[len(m.Tips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleConditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleConditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFulfillEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomMap == nil {
				m.DenomMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DenomMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFulfillEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOptOutEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOptOutEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOptOutEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOptOutEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOptOutEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOptOutEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendOracleRequestPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendOracleRequestPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendOracleRequestPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptID", wireType)
			}
			m.OracleScriptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calldata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calldata = append(m.Calldata[:0], dAtA[iNdEx:postIndex]...)
			if m.Calldata == nil {
				m.Calldata = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendOracleRequestPacketDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendOracleRequestPacketDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendOracleRequestPacketDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetSourceChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetSourceChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetSourceChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetSourceChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetSourceChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetSourceChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
