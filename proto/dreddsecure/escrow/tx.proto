syntax = "proto3";

package dreddsecure.escrow;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "dredd-secure/x/escrow/types";

// Msg defines the Msg service.
service Msg {
  rpc CreateEscrow                (MsgCreateEscrow               ) returns (MsgCreateEscrowResponse               );
  rpc CancelEscrow                (MsgCancelEscrow               ) returns (MsgCancelEscrowResponse               );
  rpc FulfillEscrow               (MsgFulfillEscrow              ) returns (MsgFulfillEscrowResponse              );
  rpc OptOutEscrow                (MsgOptOutEscrow               ) returns (MsgOptOutEscrowResponse               );
  rpc SendOracleRequestPacketData (MsgSendOracleRequestPacketData) returns (MsgSendOracleRequestPacketDataResponse);
  rpc SetSourceChannel            (MsgSetSourceChannel           ) returns (MsgSetSourceChannelResponse           );
}
message MsgCreateEscrow {
           string                   creator        = 1;
  repeated cosmos.base.v1beta1.Coin initiatorCoins = 2 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin fulfillerCoins = 3 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin tips = 4 [(gogoproto.nullable) = false];
           string                   startDate      = 5;
           string                   endDate        = 6;
           string                   oracleConditions  = 7;
}

message MsgCreateEscrowResponse {}

message MsgCancelEscrow {
  string creator = 1;
  uint64 id      = 2;
}

message MsgCancelEscrowResponse {}

message MsgFulfillEscrow {
  string creator = 1;
  uint64 id      = 2;
}

message MsgFulfillEscrowResponse {}

message MsgOptOutEscrow {
  string creator = 1;
  uint64 id      = 2;
}

message MsgOptOutEscrowResponse {}

message MsgSendOracleRequestPacketData {
           string                   clientID         =  5;
           uint64                   oracleScriptID   =  6;
           bytes                    calldata         =  7;
           uint64                   askCount         =  8;
           uint64                   minCount         =  9;
  repeated cosmos.base.v1beta1.Coin feeLimit         = 10 [(gogoproto.nullable) = false];
           uint64                   prepareGas       = 11;
           uint64                   executeGas       = 12;
           string                   creator          =  1;
           string                   port             =  2;
           string                   channelID        =  3;
           uint64                   timeoutTimestamp =  4;
}

message MsgSendOracleRequestPacketDataResponse {}

message MsgSetSourceChannel {
  string creator = 1;
  string channel = 2;
}

message MsgSetSourceChannelResponse {}